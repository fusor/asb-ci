<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.5.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/fusor/catasb</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <assignedNode>docker</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>H H/6 * * *</spec>
    </hudson.triggers.TimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>export ERROR=false

PATH=/root/bin:$PATH

cat &lt;&lt; EOF &gt; config/my_vars.yml
---
dockerhub_user_name: brokerciuser
dockerhub_org_name: ansibleplaybookbundle
dockerhub_user_password: brokerciuser
EOF

cd local/linux
./reset_environment.sh

cat &lt;&lt; EOF &gt; postgresql.yaml
apiVersion: servicecatalog.k8s.io/v1alpha1
kind: Instance
metadata:
  name: postgresql
  namespace: default
spec:
  serviceClassName: dh-ansibleplaybookbundle-rhscl-postgresql-apb
  planName: prod
  parameters:
    postgresql_database: &quot;admin&quot;
    postgresql_password: &quot;admin&quot;
    postgresql_user: &quot;admin&quot;
    postgresql_version: &quot;9.5&quot;
EOF

cat &lt;&lt; EOF &gt; mediawiki123.yaml
apiVersion: servicecatalog.k8s.io/v1alpha1
kind: Instance
metadata:
  name: mediawiki
  namespace: default
spec:
  serviceClassName: dh-ansibleplaybookbundle-mediawiki123-apb
  planName: default
  parameters:
    mediawiki_db_schema: &quot;mediawiki&quot;
    mediawiki_site_name: &quot;Mediawiki-CI&quot;
    mediawiki_site_lang: &quot;en&quot;
    mediawiki_admin_user: &quot;ci-user&quot;
    mediawiki_admin_pass: &quot;admin&quot;
EOF

cat &lt;&lt; EOF &gt; bind-mediawiki-postgresql.yaml
apiVersion: servicecatalog.k8s.io/v1alpha1
kind: Binding
metadata:
  name: mediawiki-postgresql-binding
  namespace: default
spec:
  instanceRef:
    name: postgresql
  secretName: mediawiki-postgresql-binding
  alphaPodPresetTemplate:
    name: bind-postgresql-mediawiki
    selector:
      matchLabels:
        app: mediawiki123
EOF

cat &lt;&lt; EOF &gt; wait-for-pods.sh
#!/bin/bash

set -x

for r in \$(seq 100); do
    postgresql=\$(oc get pods -n default | grep postgresql | grep -v deploy | awk \$&apos;{ print \$3 }&apos;)
    oc get pods -n default | grep postgresql
    if [ &quot;\${postgresql}&quot; = &apos;Running&apos; ]; then
       echo &quot;postgresql pod is running&quot;
       break
    fi
    sleep 1
done

for r in \$(seq 100); do
    mediawiki=\$(oc get pods -n default | grep mediawiki | grep -v deploy | awk \$&apos;{ print \$3 }&apos;)
    oc get pods -n default | grep mediawiki
    if [ &quot;\${mediawiki}&quot; = &apos;Running&apos; ]; then
       echo &quot;mediawiki pod is running&quot;
       break
    fi
    sleep 1
done
EOF

chmod +x wait-for-pods.sh

oc create -f ./mediawiki123.yaml || export ERROR=true
oc create -f ./postgresql.yaml || export ERROR=true
./wait-for-pods.sh &amp;&gt; /tmp/wait-for-pods-log || export ERROR=true
sleep 60
oc create -f ./bind-mediawiki-postgresql.yaml || export ERROR=true
sleep 20
oc delete pods $(oc get pods -n default | grep mediawiki | awk $&apos;{ print $1 }&apos;) -n default || export ERROR=true
sleep 30
export BIND_CHECK=$(curl $(oc get route -n default | grep mediawiki | cut -f 4 -d &apos; &apos;)/index.php/Main_Page | grep &quot;div class&quot; | cut -f 2 -d &quot;&apos;&quot;)
if [ &quot;${BIND_CHECK}&quot; = &quot;error&quot; ]; then export ERROR=true; fi
if ${ERROR}; then oc get serviceclasses --all-namespaces; fi
if ${ERROR}; then oc get secrets --all-namespaces | grep mediawiki-postgresql-binding; fi
if ${ERROR}; then oc get secret mediawiki-postgresql-binding -o yaml -n default; fi
if ${ERROR}; then oc get podpresets -n default; fi
if ${ERROR}; then oc get pods $(oc get pods -n default | grep mediawiki | awk $&apos;{ print $1 }&apos;) -o yaml -n default; fi
if ${ERROR}; then oc get pods --all-namespaces; fi
if ${ERROR}; then cat /tmp/wait-for-pods-log; fi
if ${ERROR}; then oc logs $(oc get pods -o name -l service=asb --all-namespaces | cut -f 2 -d &apos;/&apos;) -n ansible-service-broker -c asb; fi
if ${ERROR}; then exit 1; fi</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.Mailer plugin="mailer@1.20">
      <recipients>ccpeng-team@redhat.com</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
    <hudson.plugins.ws__cleanup.WsCleanup plugin="ws-cleanup@0.34">
      <patterns class="empty-list"/>
      <deleteDirs>false</deleteDirs>
      <skipWhenFailed>false</skipWhenFailed>
      <cleanWhenSuccess>true</cleanWhenSuccess>
      <cleanWhenUnstable>false</cleanWhenUnstable>
      <cleanWhenFailure>false</cleanWhenFailure>
      <cleanWhenNotBuilt>false</cleanWhenNotBuilt>
      <cleanWhenAborted>false</cleanWhenAborted>
      <notFailBuild>false</notFailBuild>
      <cleanupMatrixParent>false</cleanupMatrixParent>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.WsCleanup>
  </publishers>
  <buildWrappers/>
</project>